{"version":3,"file":"component---src-pages-whitepapers-index-md-584dd9bab23f326aa5c3.js","mappings":"2OAOsBA,E,wEADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIK,OAJG,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAG5E,SAACT,EAAI,CAACU,MAAM,wBAAwBD,QAAQ,UAC5C,mBAAG,iBAAME,WAAW,IAChB,UAAa,4BACb,MAAS,CACP,SAAY,WACZ,QAAW,QACX,WAAc,OACd,YAAe,OACf,SAAY,WACb,YAED,iBAAMA,WAAW,OACf,UAAa,qCACb,MAAS,CACP,cAAiB,WACjB,SAAY,WACZ,OAAU,IACV,KAAQ,IACR,QAAW,QACX,WAAc,oBACd,cAAiB,UAEX,QACd,oBAASA,WAAW,QAAM,gBAClB,mBAAQA,WAAW,UACnB,OAAU,CAAC,wFAAyF,wFAAyF,0FAC7L,MAAS,oCACT,KAAQ,eACE,gBACV,mBAAQA,WAAW,UACnB,OAAU,CAAC,uFAAwF,uFAAwF,yFAC3L,MAAS,oCACT,KAAQ,eACE,gBACV,gBAAKA,WAAW,UAChB,UAAa,0BACb,IAAO,kFACP,IAAO,aACP,MAAS,aACT,QAAW,OACX,MAAS,CACP,MAAS,OACT,OAAU,OACV,OAAU,IACV,cAAiB,SACjB,SAAY,WACZ,QAAW,IACX,WAAc,eACd,MAAS,UACT,UAAa,+BACb,IAAO,IACP,KAAQ,OAEH,cACC,YAEhB,eACE,GAAM,iBAAe,oBAEvB,iHACA,eACE,GAAM,qCAAmC,sCAmF/C,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/whitepapers/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/cpp-at-adobe/cpp-at-adobe/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Hero = makeShortcode(\"Hero\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Hero slots=\"image, heading, text1\" mdxType=\"Hero\" />\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"20.9375%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/cpp-at-adobe/static/9a260218c4297a6938367b68ce240a55/5530d/header_gradient.webp 320w\", \"/cpp-at-adobe/static/9a260218c4297a6938367b68ce240a55/0c8fb/header_gradient.webp 640w\", \"/cpp-at-adobe/static/9a260218c4297a6938367b68ce240a55/94b1e/header_gradient.webp 1280w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/cpp-at-adobe/static/9a260218c4297a6938367b68ce240a55/8980b/header_gradient.jpg 320w\", \"/cpp-at-adobe/static/9a260218c4297a6938367b68ce240a55/56d4e/header_gradient.jpg 640w\", \"/cpp-at-adobe/static/9a260218c4297a6938367b68ce240a55/62aaf/header_gradient.jpg 1280w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/jpeg\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/cpp-at-adobe/static/9a260218c4297a6938367b68ce240a55/62aaf/header_gradient.jpg\",\n            \"alt\": \"Hero image\",\n            \"title\": \"Hero image\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h1 {...{\n      \"id\": \"c-whitepapers\"\n    }}>{`C++ Whitepapers`}</h1>\n    <p>{`Our library of C++ whitepapers, providing insights, methodologies, and advanced techniques`}</p>\n    <h2 {...{\n      \"id\": \"nothing-here-yet-check-back-later\"\n    }}>{`Nothing here yet! Check back later`}</h2>\n    {/*\n     ## Featured\n     <TextBlock slots=\"image, heading, text, links\" width=\"33%\" />\n     ![C++ logo](../images/cpp-successor-update.jpg)\n     #### Memory safety and C++ successors\n     Software exploits increasingly harm consumers and threaten national security.\n     Memory safe programming languages provide substantial protection and some groups\n     are calling for legislation incentivizing their adoption. Unfortunately, it\n     isn't clear how companies with large existing C++ codebases can adapt. In an\n     effort to help answer that question, this paper explores the adoption\n     feasibility of several memory safe alternatives to C++. - *David Sankel* - May\n     22, 2023\n     [View Whitepaper](./cpp-successor-update/)\n     <TextBlock slots=\"image, heading, text, links\" width=\"33%\" />\n     ![C++ logo](../images/c_plus_plus_logo.png)\n     #### Safety in the context of C++\n     Safety, particularly _memory safety_, is a growing concern in the C++ community\n     driven by the security implications of memory unsafe systems. Consumer Reports\n     states, \"Roughly 60 to 70 percent of browser and kernel vulnerabilities, and\n     security bugs found in C/C++ code bases, are due to memory unsafety.\". A recent\n     NSA report states, \"...the overarching software community across the private\n     sector, academia, and the U.S. Government have begun initiatives to drive the\n     software development culture towards utilizing memory safe languages.\" The White\n     House National Cybersecurity Strategy plans to hold companies responsible for\n     retained data and increase liability for insecure software. Memory safety is\n     also called out. \"In partnership with the private sector and the open-source\n     software community, the Federal Government will also continue to invest in\n     developing secure software, including memory-safe languages and software\n     development techniques, frameworks, and testing tools.\" This document defines\n     _safety_ and related terms to provide a framework to further the discussion with\n     actionable guidance regarding the correct use of C++.- *Sean Parent* - May 20,\n     2023\n     [View Whitepaper](./cpp-successor-update/)\n     <TextBlock slots=\"image, heading, text, links\" width=\"33%\" />\n     ![C++ logo](../images/object-validity-state-value.jpg)\n     #### Defining Object, Validity, State, and Value\n     This document introduces a vocabulary and conceptual framework for dealing with\n     objects and validity in C++. We begin by exploring the limitations of existing\n     models and relevant examples. We proceed by introducing the meaning of validity,\n     object, state, and value. Finally, we define \"meaningless\" and demonstrate\n     its harmony with existing practice and desires. We discuss the implications of\n     this model for move semantics, correctness, and efficiency. - *David Sankel* -\n     May 19, 2023\n     [View Whitepaper](./cpp-successor-update/)\n     ## 2023\n     ### [Memory safety and C++ successors](./cpp-successor-update/)\n     Software exploits increasingly harm consumers and threaten national security.\n     Memory safe programming languages provide substantial protection and some groups\n     are calling for legislation incentivizing their adoption. Unfortunately, it\n     isn't clear how companies with large existing C++ codebases can adapt. In an\n     effort to help answer that question, this paper explores the adoption\n     feasibility of several memory safe alternatives to C++.  \n     *David Sankel* &mdash; May 22, 2023\n     ### [Safety in the context of C++](./cpp-successor-update/)\n     Safety, particularly _memory safety_, is a growing concern in the C++ community\n     driven by the security implications of memory unsafe systems. Consumer Reports\n     states, \"Roughly 60 to 70 percent of browser and kernel vulnerabilities, and\n     security bugs found in C/C++ code bases, are due to memory unsafety.\". A recent\n     NSA report states, \"...the overarching software community across the private\n     sector, academia, and the U.S. Government have begun initiatives to drive the\n     software development culture towards utilizing memory safe languages.\" The White\n     House National Cybersecurity Strategy plans to hold companies responsible for\n     retained data and increase liability for insecure software. Memory safety is\n     also called out. \"In partnership with the private sector and the open-source\n     software community, the Federal Government will also continue to invest in\n     developing secure software, including memory-safe languages and software\n     development techniques, frameworks, and testing tools.\" This document defines\n     _safety_ and related terms to provide a framework to further the discussion with\n     actionable guidance regarding the correct use of C++.  \n     *Sean Parent* &mdash; May 20, 2023\n     ### [Defining Object, Validity, State, and Value](./cpp-successor-update)\n     This document introduces a vocabulary and conceptual framework for dealing with\n     objects and validity in C++. We begin by exploring the limitations of existing\n     models and relevant examples. We proceed by introducing the meaning of validity,\n     object, state, and value. Finally, we define \"meaningless\" and demonstrate\n     its harmony with existing practice and desires. We discuss the implications of\n     this model for move semantics, correctness, and efficiency.  \n     *David Sankel* &mdash; May 19, 2023\n     */}\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Hero","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","slots","parentName","isMDXComponent"],"sourceRoot":""}