"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[673],{96432:function(e,a,t){t.r(a),t.d(a,{_frontmatter:function(){return p},default:function(){return g}});var n,i=t(87462),o=t(63366),r=(t(15007),t(64983)),s=t(91515),d=["components"],p={},l=(n="Hero",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)}),m={_frontmatter:p},c=s.Z;function g(e){var a=e.components,t=(0,o.Z)(e,d);return(0,r.mdx)(c,(0,i.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,r.mdx)(l,{slots:"image, heading, text1",mdxType:"Hero"}),(0,r.mdx)("p",null,(0,r.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1280px"}},"\n      ",(0,r.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"20.9375%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,r.mdx)("picture",{parentName:"span"},"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/cpp-at-adobe/static/9a260218c4297a6938367b68ce240a55/5530d/header_gradient.webp 320w","/cpp-at-adobe/static/9a260218c4297a6938367b68ce240a55/0c8fb/header_gradient.webp 640w","/cpp-at-adobe/static/9a260218c4297a6938367b68ce240a55/94b1e/header_gradient.webp 1280w"],sizes:"(max-width: 1280px) 100vw, 1280px",type:"image/webp"}),"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/cpp-at-adobe/static/9a260218c4297a6938367b68ce240a55/8980b/header_gradient.jpg 320w","/cpp-at-adobe/static/9a260218c4297a6938367b68ce240a55/56d4e/header_gradient.jpg 640w","/cpp-at-adobe/static/9a260218c4297a6938367b68ce240a55/62aaf/header_gradient.jpg 1280w"],sizes:"(max-width: 1280px) 100vw, 1280px",type:"image/jpeg"}),"\n          ",(0,r.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/cpp-at-adobe/static/9a260218c4297a6938367b68ce240a55/62aaf/header_gradient.jpg",alt:"Hero image",title:"Hero image",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,r.mdx)("h1",{id:"training"},"Training"),(0,r.mdx)("p",null,"A collection of expert-led training videos on C++ development, produced by Adobe's top engineers"),(0,r.mdx)("h2",{id:"adobe-software-technology-labs-better-code-seminar"},"Adobe Software Technology Lab's Better Code Seminar"),(0,r.mdx)("p",null,"The Better Code Seminar is an interactive and informative event designed to\nenhance your programming skills and elevate the quality of your code. Our goal\nis to provide you with a comprehensive understanding of the principles that\nunderlie great code, based on the latest research and deep thinking in the\nfield."),(0,r.mdx)("h3",{id:"better-code-functional-design"},"Better Code: Functional Design"),(0,r.mdx)("p",null,"Functional languages emphasize powerful, simple, and composable APIs, but you\ndon't need to use these languages to benefit from their advantages."),(0,r.mdx)("p",null,"This talk introduces functional design and showcases its application to several\nreal-world problems. It covers denotational semantics and several math-based\nprogramming abstractions. Finally, functional solutions are compared with\ntraditional ones."),(0,r.mdx)("p",null,"No prior knowledge of functional programming is required for this talk.",(0,r.mdx)("br",{parentName:"p"}),"\n",(0,r.mdx)("em",{parentName:"p"},"David Sankel")),(0,r.mdx)("p",null,(0,r.mdx)("a",{parentName:"p",href:"https://youtu.be/Ijpe9oaF26k"},(0,r.mdx)("strong",{parentName:"a"},"See the recording..."))),(0,r.mdx)("h3",{id:"better-code-reliable-types"},"Better Code: Reliable Types"),(0,r.mdx)("p",null,"Types are as fundamental as algorithms when architecting any software system. By\ndesigning our types around relationships already in our code, and rigorously\nupholding those relationships with our type invariants, we can build more\nreliable systems that are easier to reason about. We cover type design and\nmaking invalid states unrepresentable with algebraic data types.",(0,r.mdx)("br",{parentName:"p"}),"\n",(0,r.mdx)("em",{parentName:"p"},"Nick DeMarco")),(0,r.mdx)("p",null,(0,r.mdx)("a",{parentName:"p",href:"https://youtu.be/J7Aql-rdx6Y"},(0,r.mdx)("strong",{parentName:"a"},"See the recording..."))))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-training-index-md-5fe90c9f4bcae612eae8.js.map